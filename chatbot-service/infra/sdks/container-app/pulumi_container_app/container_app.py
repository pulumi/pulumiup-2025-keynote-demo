# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ContainerAppArgs', 'ContainerApp']

@pulumi.input_type
class ContainerAppArgs:
    def __init__(__self__, *,
                 app_path: pulumi.Input[builtins.str],
                 app_port: pulumi.Input[builtins.int],
                 alb_cert_arn: Optional[pulumi.Input[builtins.str]] = None,
                 cpu: Optional[pulumi.Input[builtins.int]] = None,
                 desired_count: Optional[pulumi.Input[builtins.int]] = None,
                 env: Optional[Mapping[str, pulumi.Input[builtins.str]]] = None,
                 memory: Optional[pulumi.Input[builtins.int]] = None,
                 public_subnet_ids: Optional[pulumi.Input[Sequence[builtins.str]]] = None,
                 secrets: Optional[Mapping[str, pulumi.Input[builtins.str]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ContainerApp resource.
        """
        pulumi.set(__self__, "app_path", app_path)
        pulumi.set(__self__, "app_port", app_port)
        if alb_cert_arn is not None:
            pulumi.set(__self__, "alb_cert_arn", alb_cert_arn)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if desired_count is not None:
            pulumi.set(__self__, "desired_count", desired_count)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if public_subnet_ids is not None:
            pulumi.set(__self__, "public_subnet_ids", public_subnet_ids)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="appPath")
    def app_path(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "app_path")

    @app_path.setter
    def app_path(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "app_path", value)

    @property
    @pulumi.getter(name="appPort")
    def app_port(self) -> pulumi.Input[builtins.int]:
        return pulumi.get(self, "app_port")

    @app_port.setter
    def app_port(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "app_port", value)

    @property
    @pulumi.getter(name="albCertArn")
    def alb_cert_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "alb_cert_arn")

    @alb_cert_arn.setter
    def alb_cert_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alb_cert_arn", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="desiredCount")
    def desired_count(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "desired_count")

    @desired_count.setter
    def desired_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "desired_count", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="publicSubnetIds")
    def public_subnet_ids(self) -> Optional[pulumi.Input[Sequence[builtins.str]]]:
        return pulumi.get(self, "public_subnet_ids")

    @public_subnet_ids.setter
    def public_subnet_ids(self, value: Optional[pulumi.Input[Sequence[builtins.str]]]):
        pulumi.set(self, "public_subnet_ids", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Mapping[str, pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[Mapping[str, pulumi.Input[builtins.str]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


class ContainerApp(pulumi.ComponentResource):

    pulumi_type = "container-app:index:ContainerApp"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_cert_arn: Optional[pulumi.Input[builtins.str]] = None,
                 app_path: Optional[pulumi.Input[builtins.str]] = None,
                 app_port: Optional[pulumi.Input[builtins.int]] = None,
                 cpu: Optional[pulumi.Input[builtins.int]] = None,
                 desired_count: Optional[pulumi.Input[builtins.int]] = None,
                 env: Optional[Mapping[str, pulumi.Input[builtins.str]]] = None,
                 memory: Optional[pulumi.Input[builtins.int]] = None,
                 public_subnet_ids: Optional[pulumi.Input[Sequence[builtins.str]]] = None,
                 secrets: Optional[Mapping[str, pulumi.Input[builtins.str]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        A component that deploys a containerized application to AWS ECS Fargate.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A component that deploys a containerized application to AWS ECS Fargate.

        :param str resource_name: The name of the resource.
        :param ContainerAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_cert_arn: Optional[pulumi.Input[builtins.str]] = None,
                 app_path: Optional[pulumi.Input[builtins.str]] = None,
                 app_port: Optional[pulumi.Input[builtins.int]] = None,
                 cpu: Optional[pulumi.Input[builtins.int]] = None,
                 desired_count: Optional[pulumi.Input[builtins.int]] = None,
                 env: Optional[Mapping[str, pulumi.Input[builtins.str]]] = None,
                 memory: Optional[pulumi.Input[builtins.int]] = None,
                 public_subnet_ids: Optional[pulumi.Input[Sequence[builtins.str]]] = None,
                 secrets: Optional[Mapping[str, pulumi.Input[builtins.str]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerAppArgs.__new__(ContainerAppArgs)

            __props__.__dict__["alb_cert_arn"] = alb_cert_arn
            if app_path is None and not opts.urn:
                raise TypeError("Missing required property 'app_path'")
            __props__.__dict__["app_path"] = app_path
            if app_port is None and not opts.urn:
                raise TypeError("Missing required property 'app_port'")
            __props__.__dict__["app_port"] = app_port
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["desired_count"] = desired_count
            __props__.__dict__["env"] = env
            __props__.__dict__["memory"] = memory
            __props__.__dict__["public_subnet_ids"] = public_subnet_ids
            __props__.__dict__["secrets"] = secrets
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["url"] = None
        super(ContainerApp, __self__).__init__(
            'container-app:index:ContainerApp',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[builtins.str]:
        """
        The URL of the deployed application.
        """
        return pulumi.get(self, "url")

